# Production Docker Compose Configuration
# Social Media Content Visual Pipeline - Production Deployment
# Includes: Database, Redis, Nginx, Backend, Frontend, Monitoring

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: smcp_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/02-init.sh:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: smcp_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BACKEND_PORT=${BACKEND_PORT}
        - FRONTEND_PORT=${FRONTEND_PORT}
    image: ${PROJECT_NAME}:backend-${BUILD_ID}
    container_name: smcp_backend_prod
    env_file: .env.production
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ENVIRONMENT=production
      - BACKEND_PORT=${BACKEND_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - FREEPIK_API_KEY=${FREEPIK_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - uploaded_assets:/app/uploads
      - generated_content:/app/generated
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
      - frontend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - FRONTEND_PORT=${FRONTEND_PORT}
        - BACKEND_PORT=${BACKEND_PORT}
        - BACKEND_HOST=${BACKEND_HOST}
    image: ${PROJECT_NAME}:frontend-${BUILD_ID}
    container_name: smcp_frontend_prod
    env_file: .env.production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_HOST=${BACKEND_HOST}
      - NEXT_PUBLIC_BACKEND_PORT=${BACKEND_PORT}
      - NEXT_PUBLIC_FRONTEND_PORT=${FRONTEND_PORT}
      - NEXT_PUBLIC_API_BASE_URL=https://${DOMAIN_NAME}/api
      - NEXT_PUBLIC_CDN_URL=${CDN_URL}
    volumes:
      - ./logs/frontend:/app/.next/logs
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: smcp_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - generated_content:/var/www/generated:ro
      - uploaded_assets:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - frontend-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${PROJECT_NAME}:backend-${BUILD_ID}
    container_name: smcp_celery_worker_prod
    command: celery -A api.main worker --loglevel=info --concurrency=4
    env_file: .env.production
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - FREEPIK_API_KEY=${FREEPIK_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - uploaded_assets:/app/uploads
      - generated_content:/app/generated
      - ./logs/celery:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${PROJECT_NAME}:backend-${BUILD_ID}
    container_name: smcp_celery_beat_prod
    command: celery -A api.main beat --loglevel=info --schedule=/app/celerybeat-schedule
    env_file: .env.production
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
      - ./logs/celery:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: smcp_prometheus_prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - monitoring-network
      - backend-network

  # Grafana for Monitoring Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: smcp_grafana_prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN_NAME}
      - GF_SERVER_ROOT_URL=https://${DOMAIN_NAME}/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - monitoring-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: smcp_node_exporter_prod
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - monitoring-network

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: smcp_cadvisor_prod
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - monitoring-network

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: smcp_loki_prod
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    restart: unless-stopped
    networks:
      - monitoring-network

  # Promtail for Log Shipping
  promtail:
    image: grafana/promtail:latest
    container_name: smcp_promtail_prod
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    restart: unless-stopped
    networks:
      - monitoring-network

  # Backup Service
  backup:
    image: postgres:16-alpine
    container_name: smcp_backup_prod
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_data:/backups
    command: |
      sh -c '
        apk add --no-cache aws-cli &&
        chmod +x /backup.sh &&
        crond -f -l 2
      '
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network

# Network Configuration
networks:
  frontend-network:
    driver: bridge
    name: smcp_frontend_prod
  backend-network:
    driver: bridge
    name: smcp_backend_prod
  monitoring-network:
    driver: bridge
    name: smcp_monitoring_prod

# Persistent Volume Configuration
volumes:
  postgres_data:
    driver: local
    name: smcp_postgres_data_prod
  redis_data:
    driver: local
    name: smcp_redis_data_prod
  uploaded_assets:
    driver: local
    name: smcp_uploaded_assets_prod
  generated_content:
    driver: local
    name: smcp_generated_content_prod
  celery_beat_data:
    driver: local
    name: smcp_celery_beat_data_prod
  prometheus_data:
    driver: local
    name: smcp_prometheus_data_prod
  grafana_data:
    driver: local
    name: smcp_grafana_data_prod
  loki_data:
    driver: local
    name: smcp_loki_data_prod
  backup_data:
    driver: local
    name: smcp_backup_data_prod

# Production Environment Configuration
# Create .env.production file with:
# PROJECT_NAME=smcp
# BUILD_ID=latest
# DOMAIN_NAME=your-domain.com
# POSTGRES_DB=smcp_prod
# POSTGRES_USER=smcp_user
# POSTGRES_PASSWORD=secure_password
# REDIS_PASSWORD=secure_redis_password
# FREEPIK_API_KEY=your_freepik_api_key
# SECRET_KEY=your_secret_key
# BACKEND_PORT=8000
# FRONTEND_PORT=3000
# BACKEND_HOST=backend
# CORS_ORIGINS=https://your-domain.com,https://www.your-domain.com
# CDN_URL=https://cdn.your-domain.com
# GRAFANA_ADMIN_PASSWORD=secure_grafana_password
# AWS_ACCESS_KEY_ID=your_aws_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret
# S3_BACKUP_BUCKET=smcp-backups